{"version":3,"file":"static/js/812.a16870c0.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={\r\n            {\r\n                display: 'block',\r\n                width: '250px',\r\n                height: '250px',\r\n                objectFit: 'contain',\r\n                margin: '0 auto'\r\n            }\r\n        }\r\n             src={ img }\r\n             alt=\"Error\"/>\r\n    );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState('');\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        };\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    };\n\n    return (\n        <div className=\"randomchar\">\n            { setContent(process, View, char) }\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={ updateChar } className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    );\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki } = data;\n\n    let imgStyle = { objectFit: 'cover' };\n\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { objectFit: 'contain' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={ thumbnail } alt=\"Random character\" className=\"randomchar__img\" style={ imgStyle }/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{ name }</p>\n                <p className=\"randomchar__descr\">\n                    { description }\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={ homepage } className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={ wiki } className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef, useMemo } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');\n    }\n};\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    };\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n\n        itemRefs.current[id].classList.add('char__item_selected');\n\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items = arr.map((item, index) => {\n            let imgStyle = { objectFit: 'cover' };\n\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { objectFit: 'unset' };\n            }\n\n            return (\n                <CSSTransition key={ item.id } timeout={ 500 } classNames=\"char__item\">\n                    <li\n                        className=\"char__item\"\n                        tabIndex={ 0 }\n                        ref={ el => itemRefs.current[index] = el }\n                        onClick={ () => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(index);\n                        } }\n                        onKeyPress={ (e) => {\n                            if (e.key === ' ' || e.key === 'Enter') {\n                                props.onCharSelected(item.id);\n                                focusOnItem(index);\n                            }\n                        } }>\n                        <img src={ item.thumbnail } alt={ item.name } style={ imgStyle }/>\n                        <div className=\"char__name\">{ item.name }</div>\n                    </li>\n                </CSSTransition>\n            );\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={ null }>\n                    { items }\n                </TransitionGroup>\n            </ul>\n        );\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n    }, [process]);\n\n    return (\n        <div className=\"char__list\">\n            { elements }\n            <button\n                className=\"button button__main button__long\"\n                disabled={ newItemLoading }\n                style={ { 'display': charEnded ? 'none' : 'block' } }\n                onClick={ () => onRequest(offset) }>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    );\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n}\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const { charId } = props;\n\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    };\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    return (\n        <div className=\"char__info\">\n            { setContent(process, View, char) }\n        </div>\n    );\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n    let imgStyle = { objectFit: 'cover' };\n\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { objectFit: 'contain' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={ thumbnail } alt={ name } style={ imgStyle }/>\n                <div>\n                    <div className=\"char__info-name\">{ name }</div>\n                    <div className=\"char__btns\">\n                        <a href={ homepage } className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={ wiki } className=\"button button__secondary\">\n                            <div className=\"inner\">wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                { description }\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                { comics.length > 0 ? null : 'There is no comics with this character' }\n                {\n                    comics.map((item, i) => {\n                        if (i > 9) return;\n\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                { item.name }\n                            </li>\n                        );\n                    })\n                }\n            </ul>\n        </>\n    );\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from 'react';\r\n\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\n\r\nimport * as Yup from 'yup';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const { getCharacterByName, clearError, process, setProcess } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    };\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    };\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: '',\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required'),\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\"/>\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            { results }\r\n            { errorMessage }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;\r\n","import { Component } from 'react';\r\n\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    };\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n\r\n        this.setState({\r\n            error: true,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from '../randomChar/RandomChar';\r\nimport CharList from '../charList/CharList';\r\nimport CharInfo from '../charInfo/CharInfo';\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"/>\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n","import { useState, useCallback } from 'react';\r\n\r\nconst useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (\r\n        url,\r\n        method = 'GET',\r\n        body = null,\r\n        headers = {\r\n            'Content-Type': 'application/json',\r\n        }) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method,\r\n                body,\r\n                headers,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch (e) {\r\n            setProcess('error');\r\n\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n        }, []);\r\n\r\n    return {\r\n        request,\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n    };\r\n};\r\n\r\nexport default useHttp;\r\n","import useHttp from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=e5cb50a5acb4e7c43b91f8cc0eed506b';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\r\n        return res.data.results.map(_transformCharacter);\r\n    };\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n        return _transformCharacter(res.data.results[0]);\r\n    };\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n\r\n        return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\r\n        return _transformComics(res.data.results[0]);\r\n    };\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        };\r\n    };\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || 'en-us',\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : 'not available',\r\n        };\r\n    };\r\n\r\n    return {\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacterByName,\r\n        getCharacter,\r\n        getAllComics,\r\n        getComic,\r\n    };\r\n}\r\n\r\nexport default useMarvelService;\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Skeleton from '../components/skeleton/Skeleton';\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={ data }/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","concat","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","index","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","i","charId","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","state","error","_createClass","value","errorInfo","console","log","this","setState","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","CharSearchForm","decoration","request","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","_args","wrap","_context","prev","next","undefined","fetch","sent","ok","status","json","abrupt","t0","stop","_x","_useHttp","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}